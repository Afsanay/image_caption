import os

import streamlit as st
import pickle
from tensorflow.keras.applications.vgg16 import VGG16, preprocess_input
from tensorflow.keras.preprocessing.image import load_img, img_to_array
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.models import Model
from model import load_model, predict_caption
import tensorflow as tf

tf.config.set_visible_devices([], 'GPU')


st.set_page_config(layout="wide")
with st.sidebar:
    st.image(
        'https://imageio.forbes.com/specials-images/imageserve/5f51c38ba72e09805e578c53/3-Predictions-For-The-Role-Of'
        '-Artificial-Intelligence-In-Art-And-Design/960x0.jpg?format=jpg&width=960')
    st.title("VGG and LSTM")
    st.info(
        "This is a model that can help in generating artificial captions for the images provided to it.")

st.title("Image Captioning with VGG and LSTM")

vgg_model = VGG16()
vgg_model = Model(inputs=vgg_model.inputs, outputs=vgg_model.layers[-2].output)

tokenizer = Tokenizer()
with open('tokenizer.pkl', 'rb') as f:
    tokenizer = pickle.load(f)
vocab_size = len(tokenizer.word_index) + 1

max_length = 35

model = load_model()

options = os.listdir(os.path.join('data', 'Images'))
selected_image = st.selectbox('Choose an image', options=options)

image_path = os.path.join('data', 'Images', selected_image)

if image_path is not None:
    image = load_img(image_path, target_size=(224, 224))
    image = img_to_array(image)
    image = image.reshape((1, image.shape[0], image.shape[1], image.shape[2]))
    image = preprocess_input(image)
    feature = vgg_model.predict(image, verbose=0)
    generated = predict_caption(model, feature, tokenizer, max_length)


    col1,col2 = st.columns(2)

    with col1:
        st.info("The image chosen for captioning")
        st.image(image_path)

    with col2:
        st.info("The feature vector for the image generated by VGG16 model")
        st.text(feature)
        st.info("The Generated Caption")
        gen_words = generated.split(' ')
        generated = " ".join(gen_words[1:-1])
        st.text(generated)
